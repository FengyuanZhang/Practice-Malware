import random
PRIME_NUMBER_RANGE = 1000
PRIME_NUMBER_LIST = []

def produce_prime_number(PRIME_NUMBER_RANGE):
    for i in range(2, PRIME_NUMBER_RANGE):
        prime = 1
        for j in range (2, i):
            if i%j == 0:
                prime = prime & 0
                break
        if (prime):
            PRIME_NUMBER_LIST.append(i)

def lcm(x, y):
    z = (x>y)*x + (x<y)*y
    while ( not((z%x==0) & (z%y==0)) ):
        z += 1
    return z

def relativePrime(x, y):
    while(y != 0):
        t = y
        y = x%y
        x = t
    return x

if __name__ == '__main__':

    p = 0
    q = 0

    produce_prime_number(PRIME_NUMBER_RANGE)
    print(PRIME_NUMBER_LIST)
    
    while(p==q):
        p = PRIME_NUMBER_LIST[random.randint(0, len(PRIME_NUMBER_LIST)-1)]
        q = PRIME_NUMBER_LIST[random.randint(0, len(PRIME_NUMBER_LIST)-1)]
    
    n = p * q

    print('p: ', p)
    print('q: ', q)
    print('n: ', n)

    l = lcm((p-1), (q-1))
    print('l: ', l)

    produce_prime_number(l)
    e = PRIME_NUMBER_LIST[random.randint(2, len(PRIME_NUMBER_LIST))]

    while(not(relativePrime(e, l))):
        e = PRIME_NUMBER_LIST[random.randint(len(PRIME_NUMBER_LIST))]
    
    print('e: ', e)

    d = random.randint(2, l)
    while ( (e*d)%l != 1 ):
        d = random.randint(2, l)
    
    print('d: ', d)
    print('e*d%l: ', (e*d)%l)

    content = 961
    encrypt = pow(content, e)%n
    print('encrypt: ',encrypt)
    decrypt = pow(encrypt, d)%n
    print('decrypt: ', decrypt)