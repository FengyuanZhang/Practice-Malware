import os
from scapy.layers.l2 import Ether, ARP
from scapy.sendrecv import srp, sndrcv
from scapy.layers.inet import IP, TCP
from scapy.all import *

UNKNOWN_MAC = 'ff:ff:ff:ff:ff:ff'
NETWORK = 'eth0'
LOW_PORT = 1
HIGH_PORT = 100




def get_ip():
    temp = os.popen('ifconfig ' + NETWORK)
    result = temp.readlines()
    for item in result:
        if 'inet' in item:
            return item.split('inet')[1].split('netmask')[0].strip()

def get_netmask():
    temp = os.popen('ifconfig ' + NETWORK)
    result = temp.readlines()
    netmask = ''
    for item in result:
        if 'netmask' in item:
            netmask = item.split('netmask')[1].split('broadcast')[0].strip()
            break
    return netmask
    

def get_ip_list(ip, netmask):
    the_last_digit = ip.split('.')[3]
    the_last_mask = netmask.split('.')[3]
    print('The last digit: ' + the_last_digit)
    print('The last mask: ' + the_last_mask)
    # We need to trans the last digit in ip and the last mask in netmask to binary so we can calculate the range of the current network
    ip_non_formal = str(bin(int(the_last_digit)))[2:]
    mac_non_formal = str(bin(int(the_last_mask)))[2:]
    print('The last digit in binary: ' + ip_non_formal)
    print('The last mask in binary: ' + mac_non_formal)
    # We need to mack the last digit and mask to be the same length.
    ip_need_length = 8 - len(ip_non_formal)
    mac_need_length = 8 - len(mac_non_formal)
    print('The ip need length', ip_need_length)
    print('The mac need length', mac_need_length)
    ip_formal_last = '0' * ip_need_length + ip_non_formal
    mac_formal_last = '0' * mac_need_length + mac_non_formal
    print('The ip formal last: ' + ip_formal_last)
    print('The mac formal last: ' + mac_formal_last)

    initial_ip_last = ''
    for i in range(len(ip_formal_last)):
        initial_ip_last += str(int(ip_formal_last[i]) & int(mac_formal_last[i]))
    initial_ip_last = int(initial_ip_last, 2)
    print('The initial ip last: ' , initial_ip_last)

    ip_amount = pow(2, int(mac_formal_last.count('0')))
    print('The ip amount ', ip_amount)

    for i in range(ip_amount):
        ip_list.append(ip[:-2] + str(initial_ip_last + i))


def scan_ip(ip):
    res1, res2 = srp(Ether(dst=UNKNOWN_MAC) / ARP(pdst=ip), 
    timeout = 1, verbose=False, iface=NETWORK)
    
    print('Processing: ' + str(ip_list.index(ip)) + '/' + str(len(ip_list)))
    if res1:
        for r in res1.res:
            mac_list.append(r[1].getlayer(ARP).fields['hwsrc'])
            living_ip.append(ip)
            


def port_scan(ip):
    tem = []
    ans, unans = sr( IP(dst=ip)/TCP(dport=(LOW_PORT, HIGH_PORT),flags="S"), verbose = False, timeout=3)
    for i in range(len(ans.res)):
        if ans.res[i][1].getlayer(TCP).fields['flags'] == 'SA':
            tem.append(ans.res[i][1].getlayer(TCP).fields['sport'])
    open_ports.append(tem)





if __name__ == '__main__':
    ip_list = []
    living_ip = []
    mac_list = []
    open_ports = []

    get_ip_list(get_ip(), get_netmask())


    for i in ip_list:
        scan_ip(i)

    for i in living_ip:
        port_scan(i)
    
    print('\n' * 3)

    for i in range(len(living_ip)):
        print('IP: ', living_ip[i])
        print('MAC: ', mac_list[i])
        print('Open Ports: ', open_ports[i])
        print('\n' * 3)